
Code_challenge_buzzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003700  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080038c0  080038c0  000138c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003900  08003900  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003900  08003900  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003900  08003900  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003900  08003900  00013900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003904  08003904  00013904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08003914  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003914  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a937  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001705  00000000  00000000  0002a973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0002c078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa0  00000000  00000000  0002cbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ebe8  00000000  00000000  0002d670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc44  00000000  00000000  0005c258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d366  00000000  00000000  00067e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00185202  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003030  00000000  00000000  00185254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080038a8 	.word	0x080038a8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	080038a8 	.word	0x080038a8

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2f>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a4:	bf24      	itt	cs
 80009a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ae:	d90d      	bls.n	80009cc <__aeabi_d2f+0x30>
 80009b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c4:	bf08      	it	eq
 80009c6:	f020 0001 	biceq.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d0:	d121      	bne.n	8000a16 <__aeabi_d2f+0x7a>
 80009d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009d6:	bfbc      	itt	lt
 80009d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	4770      	bxlt	lr
 80009de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e6:	f1c2 0218 	rsb	r2, r2, #24
 80009ea:	f1c2 0c20 	rsb	ip, r2, #32
 80009ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f2:	fa20 f002 	lsr.w	r0, r0, r2
 80009f6:	bf18      	it	ne
 80009f8:	f040 0001 	orrne.w	r0, r0, #1
 80009fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a08:	ea40 000c 	orr.w	r0, r0, ip
 8000a0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a14:	e7cc      	b.n	80009b0 <__aeabi_d2f+0x14>
 8000a16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1a:	d107      	bne.n	8000a2c <__aeabi_d2f+0x90>
 8000a1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a20:	bf1e      	ittt	ne
 8000a22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2a:	4770      	bxne	lr
 8000a2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay_us(uint16_t us){
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	80fb      	strh	r3, [r7, #6]
  // a functions that blocks until the timer 1 reaches the time given in us
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <delay_us+0x30>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < (us));
 8000a4e:	bf00      	nop
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <delay_us+0x30>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a56:	88fb      	ldrh	r3, [r7, #6]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d3f9      	bcc.n	8000a50 <delay_us+0x14>
}
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	20000028 	.word	0x20000028

08000a70 <set_buzzer_state>:

void set_buzzer_state(uint8_t active) {
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
  // as far as i understood the schematics correct PA3 should be turned off all the time
  // the buzzer will in this case just use one direction of current flow
  // i assume that the polarity of the buzzer is irrelevant
  GPIOG->BSRR = GPIO_BSRR_BR10;
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <set_buzzer_state+0x3c>)
 8000a7c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a80:	619a      	str	r2, [r3, #24]
  // since i want to controll the buzzer just with the pwm the BUZZ_LOGIC_OUT should be low
  GPIOE->BSRR = GPIO_BSRR_BS1;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <set_buzzer_state+0x40>)
 8000a84:	2202      	movs	r2, #2
 8000a86:	619a      	str	r2, [r3, #24]
  if (active) {
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d004      	beq.n	8000a98 <set_buzzer_state+0x28>
    //pin high -> active
    GPIOC->BSRR = GPIO_BSRR_BS14;
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <set_buzzer_state+0x44>)
 8000a90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a94:	619a      	str	r2, [r3, #24]
  } else {
    // pin low -> inactive
    GPIOC->BSRR = GPIO_BSRR_BR14;
  }
}
 8000a96:	e003      	b.n	8000aa0 <set_buzzer_state+0x30>
    GPIOC->BSRR = GPIO_BSRR_BR14;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <set_buzzer_state+0x44>)
 8000a9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a9e:	619a      	str	r2, [r3, #24]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	48001800 	.word	0x48001800
 8000ab0:	48001000 	.word	0x48001000
 8000ab4:	48000800 	.word	0x48000800

08000ab8 <play_frequency>:

void play_frequency(float frequency, uint16_t duration_ms){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	807b      	strh	r3, [r7, #2]
  // play the given frequency for the given amount of milliseconds
  // timing for one half of the period in us
	float period_us_float = 1000000.0 / (2.0 * frequency);
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff fcfe 	bl	80004c8 <__aeabi_f2d>
 8000acc:	4602      	mov	r2, r0
 8000ace:	460b      	mov	r3, r1
 8000ad0:	f7ff fb9c 	bl	800020c <__adddf3>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	a11c      	add	r1, pc, #112	; (adr r1, 8000b4c <play_frequency+0x94>)
 8000ada:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ade:	f7ff fe75 	bl	80007cc <__aeabi_ddiv>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f7ff ff57 	bl	800099c <__aeabi_d2f>
 8000aee:	4603      	mov	r3, r0
 8000af0:	60fb      	str	r3, [r7, #12]
	uint16_t period_us = (uint16_t)period_us_float;
 8000af2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000afa:	ee17 3a90 	vmov	r3, s15
 8000afe:	817b      	strh	r3, [r7, #10]

  // reset timer 2
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <play_frequency+0x90>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2200      	movs	r2, #0
 8000b06:	625a      	str	r2, [r3, #36]	; 0x24
  // run "pwm" until timer reaches duration in milliseconds
  while (__HAL_TIM_GET_COUNTER(&htim2) < (duration_ms)){
 8000b08:	e010      	b.n	8000b2c <play_frequency+0x74>
    // high
    GPIOA->BSRR = GPIO_BSRR_BS3;
 8000b0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b0e:	2208      	movs	r2, #8
 8000b10:	619a      	str	r2, [r3, #24]
    delay_us(period_us);
 8000b12:	897b      	ldrh	r3, [r7, #10]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff91 	bl	8000a3c <delay_us>
    // low
    GPIOA->BSRR = GPIO_BSRR_BR3;
 8000b1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b22:	619a      	str	r2, [r3, #24]
    delay_us(period_us);
 8000b24:	897b      	ldrh	r3, [r7, #10]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ff88 	bl	8000a3c <delay_us>
  while (__HAL_TIM_GET_COUNTER(&htim2) < (duration_ms)){
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <play_frequency+0x90>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b32:	887b      	ldrh	r3, [r7, #2]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d3e8      	bcc.n	8000b0a <play_frequency+0x52>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	f3af 8000 	nop.w
 8000b48:	20000074 	.word	0x20000074
 8000b4c:	00000000 	.word	0x00000000
 8000b50:	412e8480 	.word	0x412e8480

08000b54 <play_test_tone>:

void play_test_tone() {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  // play the testing frequency for 1000ms
  play_frequency(880.00, 1000);
 8000b58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b5c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000b68 <play_test_tone+0x14>
 8000b60:	f7ff ffaa 	bl	8000ab8 <play_frequency>
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	445c0000 	.word	0x445c0000

08000b6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b70:	f000 fb27 	bl	80011c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b74:	f000 f80c 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b78:	f000 f982 	bl	8000e80 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000b7c:	f000 f84e 	bl	8000c1c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b80:	f000 f910 	bl	8000da4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  set_buzzer_state(1);
 8000b84:	2001      	movs	r0, #1
 8000b86:	f7ff ff73 	bl	8000a70 <set_buzzer_state>
  play_test_tone();
 8000b8a:	f7ff ffe3 	bl	8000b54 <play_test_tone>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <main+0x22>

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b096      	sub	sp, #88	; 0x58
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	2244      	movs	r2, #68	; 0x44
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 fe7a 	bl	8003898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bb2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bb6:	f000 fe29 	bl	800180c <HAL_PWREx_ControlVoltageScaling>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bc0:	f000 fa06 	bl	8000fd0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bd0:	2360      	movs	r3, #96	; 0x60
 8000bd2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 fec9 	bl	8001974 <HAL_RCC_OscConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000be8:	f000 f9f2 	bl	8000fd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bec:	230f      	movs	r3, #15
 8000bee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c00:	463b      	mov	r3, r7
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f001 facf 	bl	80021a8 <HAL_RCC_ClockConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c10:	f000 f9de 	bl	8000fd0 <Error_Handler>
  }
}
 8000c14:	bf00      	nop
 8000c16:	3758      	adds	r7, #88	; 0x58
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b09e      	sub	sp, #120	; 0x78
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c22:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
 8000c5c:	615a      	str	r2, [r3, #20]
 8000c5e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c60:	463b      	mov	r3, r7
 8000c62:	222c      	movs	r2, #44	; 0x2c
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f002 fe16 	bl	8003898 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c6c:	4b4b      	ldr	r3, [pc, #300]	; (8000d9c <MX_TIM1_Init+0x180>)
 8000c6e:	4a4c      	ldr	r2, [pc, #304]	; (8000da0 <MX_TIM1_Init+0x184>)
 8000c70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 400-1;
 8000c72:	4b4a      	ldr	r3, [pc, #296]	; (8000d9c <MX_TIM1_Init+0x180>)
 8000c74:	f240 128f 	movw	r2, #399	; 0x18f
 8000c78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7a:	4b48      	ldr	r3, [pc, #288]	; (8000d9c <MX_TIM1_Init+0x180>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c80:	4b46      	ldr	r3, [pc, #280]	; (8000d9c <MX_TIM1_Init+0x180>)
 8000c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c88:	4b44      	ldr	r3, [pc, #272]	; (8000d9c <MX_TIM1_Init+0x180>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c8e:	4b43      	ldr	r3, [pc, #268]	; (8000d9c <MX_TIM1_Init+0x180>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c94:	4b41      	ldr	r3, [pc, #260]	; (8000d9c <MX_TIM1_Init+0x180>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c9a:	4840      	ldr	r0, [pc, #256]	; (8000d9c <MX_TIM1_Init+0x180>)
 8000c9c:	f001 fd0a 	bl	80026b4 <HAL_TIM_Base_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000ca6:	f000 f993 	bl	8000fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cae:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cb0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4839      	ldr	r0, [pc, #228]	; (8000d9c <MX_TIM1_Init+0x180>)
 8000cb8:	f001 fec8 	bl	8002a4c <HAL_TIM_ConfigClockSource>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000cc2:	f000 f985 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cc6:	4835      	ldr	r0, [pc, #212]	; (8000d9c <MX_TIM1_Init+0x180>)
 8000cc8:	f001 fd4b 	bl	8002762 <HAL_TIM_PWM_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8000cd2:	f000 f97d 	bl	8000fd0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000cde:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	482d      	ldr	r0, [pc, #180]	; (8000d9c <MX_TIM1_Init+0x180>)
 8000ce6:	f001 ff7a 	bl	8002bde <HAL_TIM_SlaveConfigSynchro>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000cf0:	f000 f96e 	bl	8000fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d04:	4619      	mov	r1, r3
 8000d06:	4825      	ldr	r0, [pc, #148]	; (8000d9c <MX_TIM1_Init+0x180>)
 8000d08:	f002 fc4a 	bl	80035a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000d12:	f000 f95d 	bl	8000fd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d16:	2360      	movs	r3, #96	; 0x60
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d22:	2300      	movs	r3, #0
 8000d24:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d36:	2200      	movs	r2, #0
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4818      	ldr	r0, [pc, #96]	; (8000d9c <MX_TIM1_Init+0x180>)
 8000d3c:	f001 fd72 	bl	8002824 <HAL_TIM_PWM_ConfigChannel>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000d46:	f000 f943 	bl	8000fd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d70:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4807      	ldr	r0, [pc, #28]	; (8000d9c <MX_TIM1_Init+0x180>)
 8000d80:	f002 fc96 	bl	80036b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000d8a:	f000 f921 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <MX_TIM1_Init+0x180>)
 8000d90:	f000 f97a 	bl	8001088 <HAL_TIM_MspPostInit>

}
 8000d94:	bf00      	nop
 8000d96:	3778      	adds	r7, #120	; 0x78
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000028 	.word	0x20000028
 8000da0:	40012c00 	.word	0x40012c00

08000da4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	; 0x30
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000daa:	f107 0320 	add.w	r3, r7, #32
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc8:	463b      	mov	r3, r7
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <MX_TIM2_Init+0xd8>)
 8000dd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dd8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4000-1;
 8000dda:	4b28      	ldr	r3, [pc, #160]	; (8000e7c <MX_TIM2_Init+0xd8>)
 8000ddc:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000de0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <MX_TIM2_Init+0xd8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000de8:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <MX_TIM2_Init+0xd8>)
 8000dea:	f04f 32ff 	mov.w	r2, #4294967295
 8000dee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <MX_TIM2_Init+0xd8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <MX_TIM2_Init+0xd8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dfc:	481f      	ldr	r0, [pc, #124]	; (8000e7c <MX_TIM2_Init+0xd8>)
 8000dfe:	f001 fc59 	bl	80026b4 <HAL_TIM_Base_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000e08:	f000 f8e2 	bl	8000fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e10:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e12:	f107 0320 	add.w	r3, r7, #32
 8000e16:	4619      	mov	r1, r3
 8000e18:	4818      	ldr	r0, [pc, #96]	; (8000e7c <MX_TIM2_Init+0xd8>)
 8000e1a:	f001 fe17 	bl	8002a4c <HAL_TIM_ConfigClockSource>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000e24:	f000 f8d4 	bl	8000fd0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000e2c:	2310      	movs	r3, #16
 8000e2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	4619      	mov	r1, r3
 8000e36:	4811      	ldr	r0, [pc, #68]	; (8000e7c <MX_TIM2_Init+0xd8>)
 8000e38:	f001 fed1 	bl	8002bde <HAL_TIM_SlaveConfigSynchro>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000e42:	f000 f8c5 	bl	8000fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e4e:	463b      	mov	r3, r7
 8000e50:	4619      	mov	r1, r3
 8000e52:	480a      	ldr	r0, [pc, #40]	; (8000e7c <MX_TIM2_Init+0xd8>)
 8000e54:	f002 fba4 	bl	80035a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 8000e5e:	f000 f8b7 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM_TIM2_TI4_GPIO) != HAL_OK)
 8000e62:	2100      	movs	r1, #0
 8000e64:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_TIM2_Init+0xd8>)
 8000e66:	f002 fca1 	bl	80037ac <HAL_TIMEx_RemapConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8000e70:	f000 f8ae 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	3730      	adds	r7, #48	; 0x30
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000074 	.word	0x20000074

08000e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	; 0x28
 8000e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e96:	4b4a      	ldr	r3, [pc, #296]	; (8000fc0 <MX_GPIO_Init+0x140>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	4a49      	ldr	r2, [pc, #292]	; (8000fc0 <MX_GPIO_Init+0x140>)
 8000e9c:	f043 0310 	orr.w	r3, r3, #16
 8000ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea2:	4b47      	ldr	r3, [pc, #284]	; (8000fc0 <MX_GPIO_Init+0x140>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	f003 0310 	and.w	r3, r3, #16
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	4b44      	ldr	r3, [pc, #272]	; (8000fc0 <MX_GPIO_Init+0x140>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	4a43      	ldr	r2, [pc, #268]	; (8000fc0 <MX_GPIO_Init+0x140>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eba:	4b41      	ldr	r3, [pc, #260]	; (8000fc0 <MX_GPIO_Init+0x140>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	4b3e      	ldr	r3, [pc, #248]	; (8000fc0 <MX_GPIO_Init+0x140>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	4a3d      	ldr	r2, [pc, #244]	; (8000fc0 <MX_GPIO_Init+0x140>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed2:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <MX_GPIO_Init+0x140>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ede:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <MX_GPIO_Init+0x140>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	4a37      	ldr	r2, [pc, #220]	; (8000fc0 <MX_GPIO_Init+0x140>)
 8000ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eea:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <MX_GPIO_Init+0x140>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000ef6:	f000 fd2d 	bl	8001954 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2102      	movs	r1, #2
 8000efe:	4831      	ldr	r0, [pc, #196]	; (8000fc4 <MX_GPIO_Init+0x144>)
 8000f00:	f000 fc4c 	bl	800179c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f0a:	482f      	ldr	r0, [pc, #188]	; (8000fc8 <MX_GPIO_Init+0x148>)
 8000f0c:	f000 fc46 	bl	800179c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f16:	482d      	ldr	r0, [pc, #180]	; (8000fcc <MX_GPIO_Init+0x14c>)
 8000f18:	f000 fc40 	bl	800179c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2108      	movs	r1, #8
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f24:	f000 fc3a 	bl	800179c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4821      	ldr	r0, [pc, #132]	; (8000fc4 <MX_GPIO_Init+0x144>)
 8000f40:	f000 fa9a 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	481a      	ldr	r0, [pc, #104]	; (8000fc8 <MX_GPIO_Init+0x148>)
 8000f5e:	f000 fa8b 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4814      	ldr	r0, [pc, #80]	; (8000fcc <MX_GPIO_Init+0x14c>)
 8000f7c:	f000 fa7c 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f80:	2320      	movs	r3, #32
 8000f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4619      	mov	r1, r3
 8000f92:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <MX_GPIO_Init+0x148>)
 8000f94:	f000 fa70 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f98:	2308      	movs	r3, #8
 8000f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb2:	f000 fa61 	bl	8001478 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fb6:	bf00      	nop
 8000fb8:	3728      	adds	r7, #40	; 0x28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	48001000 	.word	0x48001000
 8000fc8:	48000800 	.word	0x48000800
 8000fcc:	48001800 	.word	0x48001800

08000fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd4:	b672      	cpsid	i
}
 8000fd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <Error_Handler+0x8>
	...

08000fdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <HAL_MspInit+0x44>)
 8000fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe6:	4a0e      	ldr	r2, [pc, #56]	; (8001020 <HAL_MspInit+0x44>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6613      	str	r3, [r2, #96]	; 0x60
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <HAL_MspInit+0x44>)
 8000ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <HAL_MspInit+0x44>)
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffe:	4a08      	ldr	r2, [pc, #32]	; (8001020 <HAL_MspInit+0x44>)
 8001000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001004:	6593      	str	r3, [r2, #88]	; 0x58
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_MspInit+0x44>)
 8001008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000

08001024 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a13      	ldr	r2, [pc, #76]	; (8001080 <HAL_TIM_Base_MspInit+0x5c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d10c      	bne.n	8001050 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <HAL_TIM_Base_MspInit+0x60>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103a:	4a12      	ldr	r2, [pc, #72]	; (8001084 <HAL_TIM_Base_MspInit+0x60>)
 800103c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001040:	6613      	str	r3, [r2, #96]	; 0x60
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <HAL_TIM_Base_MspInit+0x60>)
 8001044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800104e:	e010      	b.n	8001072 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001058:	d10b      	bne.n	8001072 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_TIM_Base_MspInit+0x60>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	4a09      	ldr	r2, [pc, #36]	; (8001084 <HAL_TIM_Base_MspInit+0x60>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6593      	str	r3, [r2, #88]	; 0x58
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <HAL_TIM_Base_MspInit+0x60>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40012c00 	.word	0x40012c00
 8001084:	40021000 	.word	0x40021000

08001088 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <HAL_TIM_MspPostInit+0x68>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d11d      	bne.n	80010e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_TIM_MspPostInit+0x6c>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	4a11      	ldr	r2, [pc, #68]	; (80010f4 <HAL_TIM_MspPostInit+0x6c>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_TIM_MspPostInit+0x6c>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	4619      	mov	r1, r3
 80010de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e2:	f000 f9c9 	bl	8001478 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010e6:	bf00      	nop
 80010e8:	3720      	adds	r7, #32
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40012c00 	.word	0x40012c00
 80010f4:	40021000 	.word	0x40021000

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <NMI_Handler+0x4>

080010fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <HardFault_Handler+0x4>

08001104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <MemManage_Handler+0x4>

0800110a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <UsageFault_Handler+0x4>

08001116 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001144:	f000 f892 	bl	800126c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <SystemInit+0x20>)
 8001152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <SystemInit+0x20>)
 8001158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800115c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001174:	f7ff ffea 	bl	800114c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001178:	480c      	ldr	r0, [pc, #48]	; (80011ac <LoopForever+0x6>)
  ldr r1, =_edata
 800117a:	490d      	ldr	r1, [pc, #52]	; (80011b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <LoopForever+0xe>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001190:	4c0a      	ldr	r4, [pc, #40]	; (80011bc <LoopForever+0x16>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119e:	f002 fb57 	bl	8003850 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011a2:	f7ff fce3 	bl	8000b6c <main>

080011a6 <LoopForever>:

LoopForever:
    b LoopForever
 80011a6:	e7fe      	b.n	80011a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011a8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011b4:	08003908 	.word	0x08003908
  ldr r2, =_sbss
 80011b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011bc:	200000c4 	.word	0x200000c4

080011c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC1_IRQHandler>

080011c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011c8:	2300      	movs	r3, #0
 80011ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011cc:	2003      	movs	r0, #3
 80011ce:	f000 f91f 	bl	8001410 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011d2:	200f      	movs	r0, #15
 80011d4:	f000 f80e 	bl	80011f4 <HAL_InitTick>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d002      	beq.n	80011e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	71fb      	strb	r3, [r7, #7]
 80011e2:	e001      	b.n	80011e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011e4:	f7ff fefa 	bl	8000fdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011e8:	79fb      	ldrb	r3, [r7, #7]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_InitTick+0x6c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d023      	beq.n	8001250 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_InitTick+0x70>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <HAL_InitTick+0x6c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001216:	fbb3 f3f1 	udiv	r3, r3, r1
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f91d 	bl	800145e <HAL_SYSTICK_Config>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10f      	bne.n	800124a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b0f      	cmp	r3, #15
 800122e:	d809      	bhi.n	8001244 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001230:	2200      	movs	r2, #0
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f000 f8f5 	bl	8001426 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800123c:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <HAL_InitTick+0x74>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e007      	b.n	8001254 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	e004      	b.n	8001254 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]
 800124e:	e001      	b.n	8001254 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000008 	.word	0x20000008
 8001264:	20000000 	.word	0x20000000
 8001268:	20000004 	.word	0x20000004

0800126c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x20>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_IncTick+0x24>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <HAL_IncTick+0x24>)
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008
 8001290:	200000c0 	.word	0x200000c0

08001294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return uwTick;
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <HAL_GetTick+0x14>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	200000c0 	.word	0x200000c0

080012ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <__NVIC_GetPriorityGrouping+0x18>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	f003 0307 	and.w	r3, r3, #7
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0a      	blt.n	800133a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	490c      	ldr	r1, [pc, #48]	; (800135c <__NVIC_SetPriority+0x4c>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	440b      	add	r3, r1
 8001334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001338:	e00a      	b.n	8001350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4908      	ldr	r1, [pc, #32]	; (8001360 <__NVIC_SetPriority+0x50>)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	3b04      	subs	r3, #4
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	440b      	add	r3, r1
 800134e:	761a      	strb	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0307 	rsb	r3, r3, #7
 800137e:	2b04      	cmp	r3, #4
 8001380:	bf28      	it	cs
 8001382:	2304      	movcs	r3, #4
 8001384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	2b06      	cmp	r3, #6
 800138c:	d902      	bls.n	8001394 <NVIC_EncodePriority+0x30>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b03      	subs	r3, #3
 8001392:	e000      	b.n	8001396 <NVIC_EncodePriority+0x32>
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	4313      	orrs	r3, r2
         );
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	; 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013dc:	d301      	bcc.n	80013e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013de:	2301      	movs	r3, #1
 80013e0:	e00f      	b.n	8001402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <SysTick_Config+0x40>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ea:	210f      	movs	r1, #15
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	f7ff ff8e 	bl	8001310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <SysTick_Config+0x40>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <SysTick_Config+0x40>)
 80013fc:	2207      	movs	r2, #7
 80013fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	e000e010 	.word	0xe000e010

08001410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff47 	bl	80012ac <__NVIC_SetPriorityGrouping>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001438:	f7ff ff5c 	bl	80012f4 <__NVIC_GetPriorityGrouping>
 800143c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	6978      	ldr	r0, [r7, #20]
 8001444:	f7ff ff8e 	bl	8001364 <NVIC_EncodePriority>
 8001448:	4602      	mov	r2, r0
 800144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff5d 	bl	8001310 <__NVIC_SetPriority>
}
 8001456:	bf00      	nop
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ffb0 	bl	80013cc <SysTick_Config>
 800146c:	4603      	mov	r3, r0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001486:	e166      	b.n	8001756 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	2101      	movs	r1, #1
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	4013      	ands	r3, r2
 8001496:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 8158 	beq.w	8001750 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d005      	beq.n	80014b8 <HAL_GPIO_Init+0x40>
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d130      	bne.n	800151a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ee:	2201      	movs	r2, #1
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	091b      	lsrs	r3, r3, #4
 8001504:	f003 0201 	and.w	r2, r3, #1
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	2b03      	cmp	r3, #3
 8001524:	d017      	beq.n	8001556 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	2203      	movs	r2, #3
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d123      	bne.n	80015aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	08da      	lsrs	r2, r3, #3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3208      	adds	r2, #8
 800156a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	220f      	movs	r2, #15
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	08da      	lsrs	r2, r3, #3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3208      	adds	r2, #8
 80015a4:	6939      	ldr	r1, [r7, #16]
 80015a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 0203 	and.w	r2, r3, #3
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80b2 	beq.w	8001750 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ec:	4b61      	ldr	r3, [pc, #388]	; (8001774 <HAL_GPIO_Init+0x2fc>)
 80015ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f0:	4a60      	ldr	r2, [pc, #384]	; (8001774 <HAL_GPIO_Init+0x2fc>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6613      	str	r3, [r2, #96]	; 0x60
 80015f8:	4b5e      	ldr	r3, [pc, #376]	; (8001774 <HAL_GPIO_Init+0x2fc>)
 80015fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001604:	4a5c      	ldr	r2, [pc, #368]	; (8001778 <HAL_GPIO_Init+0x300>)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	3302      	adds	r3, #2
 800160c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	220f      	movs	r2, #15
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800162e:	d02b      	beq.n	8001688 <HAL_GPIO_Init+0x210>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a52      	ldr	r2, [pc, #328]	; (800177c <HAL_GPIO_Init+0x304>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d025      	beq.n	8001684 <HAL_GPIO_Init+0x20c>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a51      	ldr	r2, [pc, #324]	; (8001780 <HAL_GPIO_Init+0x308>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d01f      	beq.n	8001680 <HAL_GPIO_Init+0x208>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a50      	ldr	r2, [pc, #320]	; (8001784 <HAL_GPIO_Init+0x30c>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d019      	beq.n	800167c <HAL_GPIO_Init+0x204>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a4f      	ldr	r2, [pc, #316]	; (8001788 <HAL_GPIO_Init+0x310>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d013      	beq.n	8001678 <HAL_GPIO_Init+0x200>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a4e      	ldr	r2, [pc, #312]	; (800178c <HAL_GPIO_Init+0x314>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d00d      	beq.n	8001674 <HAL_GPIO_Init+0x1fc>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a4d      	ldr	r2, [pc, #308]	; (8001790 <HAL_GPIO_Init+0x318>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d007      	beq.n	8001670 <HAL_GPIO_Init+0x1f8>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a4c      	ldr	r2, [pc, #304]	; (8001794 <HAL_GPIO_Init+0x31c>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d101      	bne.n	800166c <HAL_GPIO_Init+0x1f4>
 8001668:	2307      	movs	r3, #7
 800166a:	e00e      	b.n	800168a <HAL_GPIO_Init+0x212>
 800166c:	2308      	movs	r3, #8
 800166e:	e00c      	b.n	800168a <HAL_GPIO_Init+0x212>
 8001670:	2306      	movs	r3, #6
 8001672:	e00a      	b.n	800168a <HAL_GPIO_Init+0x212>
 8001674:	2305      	movs	r3, #5
 8001676:	e008      	b.n	800168a <HAL_GPIO_Init+0x212>
 8001678:	2304      	movs	r3, #4
 800167a:	e006      	b.n	800168a <HAL_GPIO_Init+0x212>
 800167c:	2303      	movs	r3, #3
 800167e:	e004      	b.n	800168a <HAL_GPIO_Init+0x212>
 8001680:	2302      	movs	r3, #2
 8001682:	e002      	b.n	800168a <HAL_GPIO_Init+0x212>
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <HAL_GPIO_Init+0x212>
 8001688:	2300      	movs	r3, #0
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	f002 0203 	and.w	r2, r2, #3
 8001690:	0092      	lsls	r2, r2, #2
 8001692:	4093      	lsls	r3, r2
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800169a:	4937      	ldr	r1, [pc, #220]	; (8001778 <HAL_GPIO_Init+0x300>)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	3302      	adds	r3, #2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a8:	4b3b      	ldr	r3, [pc, #236]	; (8001798 <HAL_GPIO_Init+0x320>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016cc:	4a32      	ldr	r2, [pc, #200]	; (8001798 <HAL_GPIO_Init+0x320>)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016d2:	4b31      	ldr	r3, [pc, #196]	; (8001798 <HAL_GPIO_Init+0x320>)
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016f6:	4a28      	ldr	r2, [pc, #160]	; (8001798 <HAL_GPIO_Init+0x320>)
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016fc:	4b26      	ldr	r3, [pc, #152]	; (8001798 <HAL_GPIO_Init+0x320>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	43db      	mvns	r3, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001720:	4a1d      	ldr	r2, [pc, #116]	; (8001798 <HAL_GPIO_Init+0x320>)
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <HAL_GPIO_Init+0x320>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	43db      	mvns	r3, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800174a:	4a13      	ldr	r2, [pc, #76]	; (8001798 <HAL_GPIO_Init+0x320>)
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	3301      	adds	r3, #1
 8001754:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	fa22 f303 	lsr.w	r3, r2, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	f47f ae91 	bne.w	8001488 <HAL_GPIO_Init+0x10>
  }
}
 8001766:	bf00      	nop
 8001768:	bf00      	nop
 800176a:	371c      	adds	r7, #28
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	40021000 	.word	0x40021000
 8001778:	40010000 	.word	0x40010000
 800177c:	48000400 	.word	0x48000400
 8001780:	48000800 	.word	0x48000800
 8001784:	48000c00 	.word	0x48000c00
 8001788:	48001000 	.word	0x48001000
 800178c:	48001400 	.word	0x48001400
 8001790:	48001800 	.word	0x48001800
 8001794:	48001c00 	.word	0x48001c00
 8001798:	40010400 	.word	0x40010400

0800179c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	807b      	strh	r3, [r7, #2]
 80017a8:	4613      	mov	r3, r2
 80017aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017ac:	787b      	ldrb	r3, [r7, #1]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017b2:	887a      	ldrh	r2, [r7, #2]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017b8:	e002      	b.n	80017c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <HAL_PWREx_GetVoltageRange+0x3c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017dc:	d102      	bne.n	80017e4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80017de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017e2:	e00b      	b.n	80017fc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <HAL_PWREx_GetVoltageRange+0x3c>)
 80017e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017f2:	d102      	bne.n	80017fa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80017f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017f8:	e000      	b.n	80017fc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80017fa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40007000 	.word	0x40007000

0800180c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d141      	bne.n	800189e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800181a:	4b4b      	ldr	r3, [pc, #300]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001826:	d131      	bne.n	800188c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001828:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800182e:	4a46      	ldr	r2, [pc, #280]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001834:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001838:	4b43      	ldr	r3, [pc, #268]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001840:	4a41      	ldr	r2, [pc, #260]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001846:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001848:	4b40      	ldr	r3, [pc, #256]	; (800194c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2232      	movs	r2, #50	; 0x32
 800184e:	fb02 f303 	mul.w	r3, r2, r3
 8001852:	4a3f      	ldr	r2, [pc, #252]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001854:	fba2 2303 	umull	r2, r3, r2, r3
 8001858:	0c9b      	lsrs	r3, r3, #18
 800185a:	3301      	adds	r3, #1
 800185c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800185e:	e002      	b.n	8001866 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3b01      	subs	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001866:	4b38      	ldr	r3, [pc, #224]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001872:	d102      	bne.n	800187a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f2      	bne.n	8001860 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800187a:	4b33      	ldr	r3, [pc, #204]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001886:	d158      	bne.n	800193a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e057      	b.n	800193c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a2d      	ldr	r2, [pc, #180]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800189c:	e04d      	b.n	800193a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018a4:	d141      	bne.n	800192a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018a6:	4b28      	ldr	r3, [pc, #160]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b2:	d131      	bne.n	8001918 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018b4:	4b24      	ldr	r3, [pc, #144]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018ba:	4a23      	ldr	r2, [pc, #140]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c4:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018cc:	4a1e      	ldr	r2, [pc, #120]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80018d4:	4b1d      	ldr	r3, [pc, #116]	; (800194c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2232      	movs	r2, #50	; 0x32
 80018da:	fb02 f303 	mul.w	r3, r2, r3
 80018de:	4a1c      	ldr	r2, [pc, #112]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018e0:	fba2 2303 	umull	r2, r3, r2, r3
 80018e4:	0c9b      	lsrs	r3, r3, #18
 80018e6:	3301      	adds	r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ea:	e002      	b.n	80018f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018fe:	d102      	bne.n	8001906 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f2      	bne.n	80018ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001912:	d112      	bne.n	800193a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e011      	b.n	800193c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800191a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001924:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001928:	e007      	b.n	800193a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001932:	4a05      	ldr	r2, [pc, #20]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001934:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001938:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	40007000 	.word	0x40007000
 800194c:	20000000 	.word	0x20000000
 8001950:	431bde83 	.word	0x431bde83

08001954 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_PWREx_EnableVddIO2+0x1c>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <HAL_PWREx_EnableVddIO2+0x1c>)
 800195e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001962:	6053      	str	r3, [r2, #4]
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40007000 	.word	0x40007000

08001974 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	f000 bc08 	b.w	8002198 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001988:	4b96      	ldr	r3, [pc, #600]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001992:	4b94      	ldr	r3, [pc, #592]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0310 	and.w	r3, r3, #16
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80e4 	beq.w	8001b72 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d007      	beq.n	80019c0 <HAL_RCC_OscConfig+0x4c>
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2b0c      	cmp	r3, #12
 80019b4:	f040 808b 	bne.w	8001ace <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	f040 8087 	bne.w	8001ace <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019c0:	4b88      	ldr	r3, [pc, #544]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_OscConfig+0x64>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e3df      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a1a      	ldr	r2, [r3, #32]
 80019dc:	4b81      	ldr	r3, [pc, #516]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d004      	beq.n	80019f2 <HAL_RCC_OscConfig+0x7e>
 80019e8:	4b7e      	ldr	r3, [pc, #504]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019f0:	e005      	b.n	80019fe <HAL_RCC_OscConfig+0x8a>
 80019f2:	4b7c      	ldr	r3, [pc, #496]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 80019f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d223      	bcs.n	8001a4a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 fd94 	bl	8002534 <RCC_SetFlashLatencyFromMSIRange>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e3c0      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a16:	4b73      	ldr	r3, [pc, #460]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a72      	ldr	r2, [pc, #456]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a1c:	f043 0308 	orr.w	r3, r3, #8
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	4b70      	ldr	r3, [pc, #448]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	496d      	ldr	r1, [pc, #436]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a34:	4b6b      	ldr	r3, [pc, #428]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	4968      	ldr	r1, [pc, #416]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]
 8001a48:	e025      	b.n	8001a96 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a4a:	4b66      	ldr	r3, [pc, #408]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a65      	ldr	r2, [pc, #404]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a50:	f043 0308 	orr.w	r3, r3, #8
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	4b63      	ldr	r3, [pc, #396]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4960      	ldr	r1, [pc, #384]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a68:	4b5e      	ldr	r3, [pc, #376]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	495b      	ldr	r1, [pc, #364]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d109      	bne.n	8001a96 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 fd54 	bl	8002534 <RCC_SetFlashLatencyFromMSIRange>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e380      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a96:	f000 fcc1 	bl	800241c <HAL_RCC_GetSysClockFreq>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	4b51      	ldr	r3, [pc, #324]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	4950      	ldr	r1, [pc, #320]	; (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001aa8:	5ccb      	ldrb	r3, [r1, r3]
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab2:	4a4e      	ldr	r2, [pc, #312]	; (8001bec <HAL_RCC_OscConfig+0x278>)
 8001ab4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ab6:	4b4e      	ldr	r3, [pc, #312]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fb9a 	bl	80011f4 <HAL_InitTick>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d052      	beq.n	8001b70 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	e364      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d032      	beq.n	8001b3c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ad6:	4b43      	ldr	r3, [pc, #268]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a42      	ldr	r2, [pc, #264]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ae2:	f7ff fbd7 	bl	8001294 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001aea:	f7ff fbd3 	bl	8001294 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e34d      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001afc:	4b39      	ldr	r3, [pc, #228]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b08:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a35      	ldr	r2, [pc, #212]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	f043 0308 	orr.w	r3, r3, #8
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b33      	ldr	r3, [pc, #204]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	4930      	ldr	r1, [pc, #192]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b26:	4b2f      	ldr	r3, [pc, #188]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	492b      	ldr	r1, [pc, #172]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	604b      	str	r3, [r1, #4]
 8001b3a:	e01a      	b.n	8001b72 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b3c:	4b29      	ldr	r3, [pc, #164]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a28      	ldr	r2, [pc, #160]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fba4 	bl	8001294 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b50:	f7ff fba0 	bl	8001294 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e31a      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b62:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x1dc>
 8001b6e:	e000      	b.n	8001b72 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d073      	beq.n	8001c66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_OscConfig+0x21c>
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	2b0c      	cmp	r3, #12
 8001b88:	d10e      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d10b      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d063      	beq.n	8001c64 <HAL_RCC_OscConfig+0x2f0>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d15f      	bne.n	8001c64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e2f7      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb0:	d106      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x24c>
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	e025      	b.n	8001c0c <HAL_RCC_OscConfig+0x298>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc8:	d114      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x280>
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a02      	ldr	r2, [pc, #8]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e013      	b.n	8001c0c <HAL_RCC_OscConfig+0x298>
 8001be4:	40021000 	.word	0x40021000
 8001be8:	080038c0 	.word	0x080038c0
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	20000004 	.word	0x20000004
 8001bf4:	4ba0      	ldr	r3, [pc, #640]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a9f      	ldr	r2, [pc, #636]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b9d      	ldr	r3, [pc, #628]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a9c      	ldr	r2, [pc, #624]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d013      	beq.n	8001c3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff fb3e 	bl	8001294 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7ff fb3a 	bl	8001294 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	; 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e2b4      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c2e:	4b92      	ldr	r3, [pc, #584]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x2a8>
 8001c3a:	e014      	b.n	8001c66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fb2a 	bl	8001294 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff fb26 	bl	8001294 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	; 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e2a0      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c56:	4b88      	ldr	r3, [pc, #544]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x2d0>
 8001c62:	e000      	b.n	8001c66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d060      	beq.n	8001d34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_OscConfig+0x310>
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2b0c      	cmp	r3, #12
 8001c7c:	d119      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d116      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c84:	4b7c      	ldr	r3, [pc, #496]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_OscConfig+0x328>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e27d      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9c:	4b76      	ldr	r3, [pc, #472]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	061b      	lsls	r3, r3, #24
 8001caa:	4973      	ldr	r1, [pc, #460]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cb0:	e040      	b.n	8001d34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d023      	beq.n	8001d02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cba:	4b6f      	ldr	r3, [pc, #444]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a6e      	ldr	r2, [pc, #440]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc6:	f7ff fae5 	bl	8001294 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cce:	f7ff fae1 	bl	8001294 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e25b      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce0:	4b65      	ldr	r3, [pc, #404]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cec:	4b62      	ldr	r3, [pc, #392]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	061b      	lsls	r3, r3, #24
 8001cfa:	495f      	ldr	r1, [pc, #380]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]
 8001d00:	e018      	b.n	8001d34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d02:	4b5d      	ldr	r3, [pc, #372]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a5c      	ldr	r2, [pc, #368]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0e:	f7ff fac1 	bl	8001294 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d16:	f7ff fabd 	bl	8001294 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e237      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d28:	4b53      	ldr	r3, [pc, #332]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d03c      	beq.n	8001dba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d01c      	beq.n	8001d82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d48:	4b4b      	ldr	r3, [pc, #300]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d4e:	4a4a      	ldr	r2, [pc, #296]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d58:	f7ff fa9c 	bl	8001294 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d60:	f7ff fa98 	bl	8001294 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e212      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d72:	4b41      	ldr	r3, [pc, #260]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0ef      	beq.n	8001d60 <HAL_RCC_OscConfig+0x3ec>
 8001d80:	e01b      	b.n	8001dba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d82:	4b3d      	ldr	r3, [pc, #244]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d88:	4a3b      	ldr	r2, [pc, #236]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001d8a:	f023 0301 	bic.w	r3, r3, #1
 8001d8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d92:	f7ff fa7f 	bl	8001294 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9a:	f7ff fa7b 	bl	8001294 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e1f5      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dac:	4b32      	ldr	r3, [pc, #200]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1ef      	bne.n	8001d9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80a6 	beq.w	8001f14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001dcc:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10d      	bne.n	8001df4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd8:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	4a26      	ldr	r2, [pc, #152]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de2:	6593      	str	r3, [r2, #88]	; 0x58
 8001de4:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df0:	2301      	movs	r3, #1
 8001df2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df4:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <HAL_RCC_OscConfig+0x508>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d118      	bne.n	8001e32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e00:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <HAL_RCC_OscConfig+0x508>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a1d      	ldr	r2, [pc, #116]	; (8001e7c <HAL_RCC_OscConfig+0x508>)
 8001e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0c:	f7ff fa42 	bl	8001294 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e14:	f7ff fa3e 	bl	8001294 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e1b8      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <HAL_RCC_OscConfig+0x508>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f0      	beq.n	8001e14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d108      	bne.n	8001e4c <HAL_RCC_OscConfig+0x4d8>
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e40:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e4a:	e029      	b.n	8001ea0 <HAL_RCC_OscConfig+0x52c>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d115      	bne.n	8001e80 <HAL_RCC_OscConfig+0x50c>
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5a:	4a07      	ldr	r2, [pc, #28]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6a:	4a03      	ldr	r2, [pc, #12]	; (8001e78 <HAL_RCC_OscConfig+0x504>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e74:	e014      	b.n	8001ea0 <HAL_RCC_OscConfig+0x52c>
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	4b9d      	ldr	r3, [pc, #628]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 8001e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e86:	4a9c      	ldr	r2, [pc, #624]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e90:	4b99      	ldr	r3, [pc, #612]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e96:	4a98      	ldr	r2, [pc, #608]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 8001e98:	f023 0304 	bic.w	r3, r3, #4
 8001e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d016      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea8:	f7ff f9f4 	bl	8001294 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb0:	f7ff f9f0 	bl	8001294 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e168      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec6:	4b8c      	ldr	r3, [pc, #560]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 8001ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0ed      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x53c>
 8001ed4:	e015      	b.n	8001f02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed6:	f7ff f9dd 	bl	8001294 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001edc:	e00a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ede:	f7ff f9d9 	bl	8001294 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e151      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ef4:	4b80      	ldr	r3, [pc, #512]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1ed      	bne.n	8001ede <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f02:	7ffb      	ldrb	r3, [r7, #31]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d105      	bne.n	8001f14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f08:	4b7b      	ldr	r3, [pc, #492]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	4a7a      	ldr	r2, [pc, #488]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 8001f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d03c      	beq.n	8001f9a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d01c      	beq.n	8001f62 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f28:	4b73      	ldr	r3, [pc, #460]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 8001f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f2e:	4a72      	ldr	r2, [pc, #456]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f38:	f7ff f9ac 	bl	8001294 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f40:	f7ff f9a8 	bl	8001294 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e122      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f52:	4b69      	ldr	r3, [pc, #420]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 8001f54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0ef      	beq.n	8001f40 <HAL_RCC_OscConfig+0x5cc>
 8001f60:	e01b      	b.n	8001f9a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f62:	4b65      	ldr	r3, [pc, #404]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 8001f64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f68:	4a63      	ldr	r2, [pc, #396]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 8001f6a:	f023 0301 	bic.w	r3, r3, #1
 8001f6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f72:	f7ff f98f 	bl	8001294 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f7a:	f7ff f98b 	bl	8001294 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e105      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f8c:	4b5a      	ldr	r3, [pc, #360]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 8001f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1ef      	bne.n	8001f7a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 80f9 	beq.w	8002196 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	f040 80cf 	bne.w	800214c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fae:	4b52      	ldr	r3, [pc, #328]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f003 0203 	and.w	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d12c      	bne.n	800201c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d123      	bne.n	800201c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fde:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d11b      	bne.n	800201c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d113      	bne.n	800201c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffe:	085b      	lsrs	r3, r3, #1
 8002000:	3b01      	subs	r3, #1
 8002002:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002004:	429a      	cmp	r2, r3
 8002006:	d109      	bne.n	800201c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	085b      	lsrs	r3, r3, #1
 8002014:	3b01      	subs	r3, #1
 8002016:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002018:	429a      	cmp	r2, r3
 800201a:	d071      	beq.n	8002100 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	2b0c      	cmp	r3, #12
 8002020:	d068      	beq.n	80020f4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002022:	4b35      	ldr	r3, [pc, #212]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d105      	bne.n	800203a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800202e:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e0ac      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800203e:	4b2e      	ldr	r3, [pc, #184]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a2d      	ldr	r2, [pc, #180]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 8002044:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002048:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800204a:	f7ff f923 	bl	8001294 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002052:	f7ff f91f 	bl	8001294 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e099      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002064:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1f0      	bne.n	8002052 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002070:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	4b21      	ldr	r3, [pc, #132]	; (80020fc <HAL_RCC_OscConfig+0x788>)
 8002076:	4013      	ands	r3, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002080:	3a01      	subs	r2, #1
 8002082:	0112      	lsls	r2, r2, #4
 8002084:	4311      	orrs	r1, r2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800208a:	0212      	lsls	r2, r2, #8
 800208c:	4311      	orrs	r1, r2
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002092:	0852      	lsrs	r2, r2, #1
 8002094:	3a01      	subs	r2, #1
 8002096:	0552      	lsls	r2, r2, #21
 8002098:	4311      	orrs	r1, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800209e:	0852      	lsrs	r2, r2, #1
 80020a0:	3a01      	subs	r2, #1
 80020a2:	0652      	lsls	r2, r2, #25
 80020a4:	4311      	orrs	r1, r2
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020aa:	06d2      	lsls	r2, r2, #27
 80020ac:	430a      	orrs	r2, r1
 80020ae:	4912      	ldr	r1, [pc, #72]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020b4:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0f      	ldr	r2, [pc, #60]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 80020ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4a0c      	ldr	r2, [pc, #48]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 80020c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020cc:	f7ff f8e2 	bl	8001294 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d4:	f7ff f8de 	bl	8001294 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e058      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <HAL_RCC_OscConfig+0x784>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020f2:	e050      	b.n	8002196 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e04f      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
 80020f8:	40021000 	.word	0x40021000
 80020fc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002100:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <HAL_RCC_OscConfig+0x82c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d144      	bne.n	8002196 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800210c:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <HAL_RCC_OscConfig+0x82c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a23      	ldr	r2, [pc, #140]	; (80021a0 <HAL_RCC_OscConfig+0x82c>)
 8002112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002116:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002118:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <HAL_RCC_OscConfig+0x82c>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4a20      	ldr	r2, [pc, #128]	; (80021a0 <HAL_RCC_OscConfig+0x82c>)
 800211e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002122:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002124:	f7ff f8b6 	bl	8001294 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212c:	f7ff f8b2 	bl	8001294 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e02c      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800213e:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <HAL_RCC_OscConfig+0x82c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0x7b8>
 800214a:	e024      	b.n	8002196 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	2b0c      	cmp	r3, #12
 8002150:	d01f      	beq.n	8002192 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002152:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <HAL_RCC_OscConfig+0x82c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <HAL_RCC_OscConfig+0x82c>)
 8002158:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800215c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215e:	f7ff f899 	bl	8001294 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002166:	f7ff f895 	bl	8001294 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e00f      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002178:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <HAL_RCC_OscConfig+0x82c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f0      	bne.n	8002166 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_RCC_OscConfig+0x82c>)
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	4905      	ldr	r1, [pc, #20]	; (80021a0 <HAL_RCC_OscConfig+0x82c>)
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_RCC_OscConfig+0x830>)
 800218c:	4013      	ands	r3, r2
 800218e:	60cb      	str	r3, [r1, #12]
 8002190:	e001      	b.n	8002196 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3720      	adds	r7, #32
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40021000 	.word	0x40021000
 80021a4:	feeefffc 	.word	0xfeeefffc

080021a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e11d      	b.n	80023fc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021c0:	4b90      	ldr	r3, [pc, #576]	; (8002404 <HAL_RCC_ClockConfig+0x25c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d910      	bls.n	80021f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b8d      	ldr	r3, [pc, #564]	; (8002404 <HAL_RCC_ClockConfig+0x25c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 020f 	bic.w	r2, r3, #15
 80021d6:	498b      	ldr	r1, [pc, #556]	; (8002404 <HAL_RCC_ClockConfig+0x25c>)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b89      	ldr	r3, [pc, #548]	; (8002404 <HAL_RCC_ClockConfig+0x25c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e105      	b.n	80023fc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d010      	beq.n	800221e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	4b81      	ldr	r3, [pc, #516]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002208:	429a      	cmp	r2, r3
 800220a:	d908      	bls.n	800221e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800220c:	4b7e      	ldr	r3, [pc, #504]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	497b      	ldr	r1, [pc, #492]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 800221a:	4313      	orrs	r3, r2
 800221c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d079      	beq.n	800231e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d11e      	bne.n	8002270 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002232:	4b75      	ldr	r3, [pc, #468]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e0dc      	b.n	80023fc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002242:	f000 f9d1 	bl	80025e8 <RCC_GetSysClockFreqFromPLLSource>
 8002246:	4603      	mov	r3, r0
 8002248:	4a70      	ldr	r2, [pc, #448]	; (800240c <HAL_RCC_ClockConfig+0x264>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d946      	bls.n	80022dc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800224e:	4b6e      	ldr	r3, [pc, #440]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d140      	bne.n	80022dc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800225a:	4b6b      	ldr	r3, [pc, #428]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002262:	4a69      	ldr	r2, [pc, #420]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 8002264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002268:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	e035      	b.n	80022dc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d107      	bne.n	8002288 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002278:	4b63      	ldr	r3, [pc, #396]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d115      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0b9      	b.n	80023fc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d107      	bne.n	80022a0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002290:	4b5d      	ldr	r3, [pc, #372]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d109      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0ad      	b.n	80023fc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022a0:	4b59      	ldr	r3, [pc, #356]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0a5      	b.n	80023fc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80022b0:	f000 f8b4 	bl	800241c <HAL_RCC_GetSysClockFreq>
 80022b4:	4603      	mov	r3, r0
 80022b6:	4a55      	ldr	r2, [pc, #340]	; (800240c <HAL_RCC_ClockConfig+0x264>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d90f      	bls.n	80022dc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80022bc:	4b52      	ldr	r3, [pc, #328]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d109      	bne.n	80022dc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022c8:	4b4f      	ldr	r3, [pc, #316]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022d0:	4a4d      	ldr	r2, [pc, #308]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 80022d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022dc:	4b4a      	ldr	r3, [pc, #296]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f023 0203 	bic.w	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	4947      	ldr	r1, [pc, #284]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022ee:	f7fe ffd1 	bl	8001294 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f4:	e00a      	b.n	800230c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f6:	f7fe ffcd 	bl	8001294 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f241 3288 	movw	r2, #5000	; 0x1388
 8002304:	4293      	cmp	r3, r2
 8002306:	d901      	bls.n	800230c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e077      	b.n	80023fc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230c:	4b3e      	ldr	r3, [pc, #248]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 020c 	and.w	r2, r3, #12
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	429a      	cmp	r2, r3
 800231c:	d1eb      	bne.n	80022f6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2b80      	cmp	r3, #128	; 0x80
 8002322:	d105      	bne.n	8002330 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002324:	4b38      	ldr	r3, [pc, #224]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4a37      	ldr	r2, [pc, #220]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 800232a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800232e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d010      	beq.n	800235e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	4b31      	ldr	r3, [pc, #196]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002348:	429a      	cmp	r2, r3
 800234a:	d208      	bcs.n	800235e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800234c:	4b2e      	ldr	r3, [pc, #184]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	492b      	ldr	r1, [pc, #172]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800235e:	4b29      	ldr	r3, [pc, #164]	; (8002404 <HAL_RCC_ClockConfig+0x25c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d210      	bcs.n	800238e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236c:	4b25      	ldr	r3, [pc, #148]	; (8002404 <HAL_RCC_ClockConfig+0x25c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f023 020f 	bic.w	r2, r3, #15
 8002374:	4923      	ldr	r1, [pc, #140]	; (8002404 <HAL_RCC_ClockConfig+0x25c>)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	4313      	orrs	r3, r2
 800237a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237c:	4b21      	ldr	r3, [pc, #132]	; (8002404 <HAL_RCC_ClockConfig+0x25c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d001      	beq.n	800238e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e036      	b.n	80023fc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800239a:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	4918      	ldr	r1, [pc, #96]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d009      	beq.n	80023cc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023b8:	4b13      	ldr	r3, [pc, #76]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4910      	ldr	r1, [pc, #64]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023cc:	f000 f826 	bl	800241c <HAL_RCC_GetSysClockFreq>
 80023d0:	4602      	mov	r2, r0
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <HAL_RCC_ClockConfig+0x260>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	091b      	lsrs	r3, r3, #4
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	490c      	ldr	r1, [pc, #48]	; (8002410 <HAL_RCC_ClockConfig+0x268>)
 80023de:	5ccb      	ldrb	r3, [r1, r3]
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
 80023e8:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <HAL_RCC_ClockConfig+0x26c>)
 80023ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <HAL_RCC_ClockConfig+0x270>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe feff 	bl	80011f4 <HAL_InitTick>
 80023f6:	4603      	mov	r3, r0
 80023f8:	73fb      	strb	r3, [r7, #15]

  return status;
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40022000 	.word	0x40022000
 8002408:	40021000 	.word	0x40021000
 800240c:	04c4b400 	.word	0x04c4b400
 8002410:	080038c0 	.word	0x080038c0
 8002414:	20000000 	.word	0x20000000
 8002418:	20000004 	.word	0x20000004

0800241c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	; 0x24
 8002420:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800242a:	4b3e      	ldr	r3, [pc, #248]	; (8002524 <HAL_RCC_GetSysClockFreq+0x108>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002434:	4b3b      	ldr	r3, [pc, #236]	; (8002524 <HAL_RCC_GetSysClockFreq+0x108>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0x34>
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	2b0c      	cmp	r3, #12
 8002448:	d121      	bne.n	800248e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d11e      	bne.n	800248e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002450:	4b34      	ldr	r3, [pc, #208]	; (8002524 <HAL_RCC_GetSysClockFreq+0x108>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d107      	bne.n	800246c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800245c:	4b31      	ldr	r3, [pc, #196]	; (8002524 <HAL_RCC_GetSysClockFreq+0x108>)
 800245e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002462:	0a1b      	lsrs	r3, r3, #8
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	e005      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800246c:	4b2d      	ldr	r3, [pc, #180]	; (8002524 <HAL_RCC_GetSysClockFreq+0x108>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002478:	4a2b      	ldr	r2, [pc, #172]	; (8002528 <HAL_RCC_GetSysClockFreq+0x10c>)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002480:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10d      	bne.n	80024a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800248c:	e00a      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	2b04      	cmp	r3, #4
 8002492:	d102      	bne.n	800249a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002494:	4b25      	ldr	r3, [pc, #148]	; (800252c <HAL_RCC_GetSysClockFreq+0x110>)
 8002496:	61bb      	str	r3, [r7, #24]
 8002498:	e004      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	2b08      	cmp	r3, #8
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024a0:	4b23      	ldr	r3, [pc, #140]	; (8002530 <HAL_RCC_GetSysClockFreq+0x114>)
 80024a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	2b0c      	cmp	r3, #12
 80024a8:	d134      	bne.n	8002514 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024aa:	4b1e      	ldr	r3, [pc, #120]	; (8002524 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d003      	beq.n	80024c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d003      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0xac>
 80024c0:	e005      	b.n	80024ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024c2:	4b1a      	ldr	r3, [pc, #104]	; (800252c <HAL_RCC_GetSysClockFreq+0x110>)
 80024c4:	617b      	str	r3, [r7, #20]
      break;
 80024c6:	e005      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HAL_RCC_GetSysClockFreq+0x114>)
 80024ca:	617b      	str	r3, [r7, #20]
      break;
 80024cc:	e002      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	617b      	str	r3, [r7, #20]
      break;
 80024d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024d4:	4b13      	ldr	r3, [pc, #76]	; (8002524 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	3301      	adds	r3, #1
 80024e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <HAL_RCC_GetSysClockFreq+0x108>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	0a1b      	lsrs	r3, r3, #8
 80024e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	fb03 f202 	mul.w	r2, r3, r2
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <HAL_RCC_GetSysClockFreq+0x108>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	0e5b      	lsrs	r3, r3, #25
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	3301      	adds	r3, #1
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002512:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002514:	69bb      	ldr	r3, [r7, #24]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3724      	adds	r7, #36	; 0x24
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000
 8002528:	080038d0 	.word	0x080038d0
 800252c:	00f42400 	.word	0x00f42400
 8002530:	007a1200 	.word	0x007a1200

08002534 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800253c:	2300      	movs	r3, #0
 800253e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002540:	4b27      	ldr	r3, [pc, #156]	; (80025e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800254c:	f7ff f93e 	bl	80017cc <HAL_PWREx_GetVoltageRange>
 8002550:	6178      	str	r0, [r7, #20]
 8002552:	e014      	b.n	800257e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002554:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002558:	4a21      	ldr	r2, [pc, #132]	; (80025e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800255a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255e:	6593      	str	r3, [r2, #88]	; 0x58
 8002560:	4b1f      	ldr	r3, [pc, #124]	; (80025e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800256c:	f7ff f92e 	bl	80017cc <HAL_PWREx_GetVoltageRange>
 8002570:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002572:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002576:	4a1a      	ldr	r2, [pc, #104]	; (80025e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800257c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002584:	d10b      	bne.n	800259e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b80      	cmp	r3, #128	; 0x80
 800258a:	d913      	bls.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2ba0      	cmp	r3, #160	; 0xa0
 8002590:	d902      	bls.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002592:	2302      	movs	r3, #2
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	e00d      	b.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002598:	2301      	movs	r3, #1
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	e00a      	b.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b7f      	cmp	r3, #127	; 0x7f
 80025a2:	d902      	bls.n	80025aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80025a4:	2302      	movs	r3, #2
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	e004      	b.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b70      	cmp	r3, #112	; 0x70
 80025ae:	d101      	bne.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025b0:	2301      	movs	r3, #1
 80025b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f023 020f 	bic.w	r2, r3, #15
 80025bc:	4909      	ldr	r1, [pc, #36]	; (80025e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025c4:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d001      	beq.n	80025d6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40022000 	.word	0x40022000

080025e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025ee:	4b2d      	ldr	r3, [pc, #180]	; (80026a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d00b      	beq.n	8002616 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d825      	bhi.n	8002650 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d008      	beq.n	800261c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d11f      	bne.n	8002650 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002610:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002612:	613b      	str	r3, [r7, #16]
    break;
 8002614:	e01f      	b.n	8002656 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002616:	4b25      	ldr	r3, [pc, #148]	; (80026ac <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002618:	613b      	str	r3, [r7, #16]
    break;
 800261a:	e01c      	b.n	8002656 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800261c:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d107      	bne.n	8002638 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002628:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800262a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800262e:	0a1b      	lsrs	r3, r3, #8
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	e005      	b.n	8002644 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002638:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002644:	4a1a      	ldr	r2, [pc, #104]	; (80026b0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264c:	613b      	str	r3, [r7, #16]
    break;
 800264e:	e002      	b.n	8002656 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	613b      	str	r3, [r7, #16]
    break;
 8002654:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002656:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	3301      	adds	r3, #1
 8002662:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002664:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	fb03 f202 	mul.w	r2, r3, r2
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	fbb2 f3f3 	udiv	r3, r2, r3
 800267a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800267c:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	0e5b      	lsrs	r3, r3, #25
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	3301      	adds	r3, #1
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002696:	683b      	ldr	r3, [r7, #0]
}
 8002698:	4618      	mov	r0, r3
 800269a:	371c      	adds	r7, #28
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	40021000 	.word	0x40021000
 80026a8:	00f42400 	.word	0x00f42400
 80026ac:	007a1200 	.word	0x007a1200
 80026b0:	080038d0 	.word	0x080038d0

080026b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e049      	b.n	800275a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe fca2 	bl	8001024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3304      	adds	r3, #4
 80026f0:	4619      	mov	r1, r3
 80026f2:	4610      	mov	r0, r2
 80026f4:	f000 fab6 	bl	8002c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e049      	b.n	8002808 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d106      	bne.n	800278e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f841 	bl	8002810 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2202      	movs	r2, #2
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3304      	adds	r3, #4
 800279e:	4619      	mov	r1, r3
 80027a0:	4610      	mov	r0, r2
 80027a2:	f000 fa5f 	bl	8002c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800283e:	2302      	movs	r3, #2
 8002840:	e0ff      	b.n	8002a42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b14      	cmp	r3, #20
 800284e:	f200 80f0 	bhi.w	8002a32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002852:	a201      	add	r2, pc, #4	; (adr r2, 8002858 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002858:	080028ad 	.word	0x080028ad
 800285c:	08002a33 	.word	0x08002a33
 8002860:	08002a33 	.word	0x08002a33
 8002864:	08002a33 	.word	0x08002a33
 8002868:	080028ed 	.word	0x080028ed
 800286c:	08002a33 	.word	0x08002a33
 8002870:	08002a33 	.word	0x08002a33
 8002874:	08002a33 	.word	0x08002a33
 8002878:	0800292f 	.word	0x0800292f
 800287c:	08002a33 	.word	0x08002a33
 8002880:	08002a33 	.word	0x08002a33
 8002884:	08002a33 	.word	0x08002a33
 8002888:	0800296f 	.word	0x0800296f
 800288c:	08002a33 	.word	0x08002a33
 8002890:	08002a33 	.word	0x08002a33
 8002894:	08002a33 	.word	0x08002a33
 8002898:	080029b1 	.word	0x080029b1
 800289c:	08002a33 	.word	0x08002a33
 80028a0:	08002a33 	.word	0x08002a33
 80028a4:	08002a33 	.word	0x08002a33
 80028a8:	080029f1 	.word	0x080029f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68b9      	ldr	r1, [r7, #8]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fa70 	bl	8002d98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699a      	ldr	r2, [r3, #24]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0208 	orr.w	r2, r2, #8
 80028c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699a      	ldr	r2, [r3, #24]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0204 	bic.w	r2, r2, #4
 80028d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6999      	ldr	r1, [r3, #24]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	691a      	ldr	r2, [r3, #16]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	619a      	str	r2, [r3, #24]
      break;
 80028ea:	e0a5      	b.n	8002a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 fae0 	bl	8002eb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699a      	ldr	r2, [r3, #24]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6999      	ldr	r1, [r3, #24]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	021a      	lsls	r2, r3, #8
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	619a      	str	r2, [r3, #24]
      break;
 800292c:	e084      	b.n	8002a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68b9      	ldr	r1, [r7, #8]
 8002934:	4618      	mov	r0, r3
 8002936:	f000 fb49 	bl	8002fcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	69da      	ldr	r2, [r3, #28]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0208 	orr.w	r2, r2, #8
 8002948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	69da      	ldr	r2, [r3, #28]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0204 	bic.w	r2, r2, #4
 8002958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	69d9      	ldr	r1, [r3, #28]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	61da      	str	r2, [r3, #28]
      break;
 800296c:	e064      	b.n	8002a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fbb1 	bl	80030dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	69da      	ldr	r2, [r3, #28]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	69da      	ldr	r2, [r3, #28]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	69d9      	ldr	r1, [r3, #28]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	021a      	lsls	r2, r3, #8
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	61da      	str	r2, [r3, #28]
      break;
 80029ae:	e043      	b.n	8002a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fbfa 	bl	80031b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0208 	orr.w	r2, r2, #8
 80029ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0204 	bic.w	r2, r2, #4
 80029da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80029ee:	e023      	b.n	8002a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68b9      	ldr	r1, [r7, #8]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 fc3e 	bl	8003278 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	021a      	lsls	r2, r3, #8
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002a30:	e002      	b.n	8002a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	75fb      	strb	r3, [r7, #23]
      break;
 8002a36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop

08002a4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_TIM_ConfigClockSource+0x1c>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e0b6      	b.n	8002bd6 <HAL_TIM_ConfigClockSource+0x18a>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aa4:	d03e      	beq.n	8002b24 <HAL_TIM_ConfigClockSource+0xd8>
 8002aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aaa:	f200 8087 	bhi.w	8002bbc <HAL_TIM_ConfigClockSource+0x170>
 8002aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab2:	f000 8086 	beq.w	8002bc2 <HAL_TIM_ConfigClockSource+0x176>
 8002ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aba:	d87f      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x170>
 8002abc:	2b70      	cmp	r3, #112	; 0x70
 8002abe:	d01a      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0xaa>
 8002ac0:	2b70      	cmp	r3, #112	; 0x70
 8002ac2:	d87b      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x170>
 8002ac4:	2b60      	cmp	r3, #96	; 0x60
 8002ac6:	d050      	beq.n	8002b6a <HAL_TIM_ConfigClockSource+0x11e>
 8002ac8:	2b60      	cmp	r3, #96	; 0x60
 8002aca:	d877      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x170>
 8002acc:	2b50      	cmp	r3, #80	; 0x50
 8002ace:	d03c      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0xfe>
 8002ad0:	2b50      	cmp	r3, #80	; 0x50
 8002ad2:	d873      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x170>
 8002ad4:	2b40      	cmp	r3, #64	; 0x40
 8002ad6:	d058      	beq.n	8002b8a <HAL_TIM_ConfigClockSource+0x13e>
 8002ad8:	2b40      	cmp	r3, #64	; 0x40
 8002ada:	d86f      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x170>
 8002adc:	2b30      	cmp	r3, #48	; 0x30
 8002ade:	d064      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x15e>
 8002ae0:	2b30      	cmp	r3, #48	; 0x30
 8002ae2:	d86b      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x170>
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	d060      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x15e>
 8002ae8:	2b20      	cmp	r3, #32
 8002aea:	d867      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x170>
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d05c      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x15e>
 8002af0:	2b10      	cmp	r3, #16
 8002af2:	d05a      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x15e>
 8002af4:	e062      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6899      	ldr	r1, [r3, #8]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f000 fd2a 	bl	800355e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	609a      	str	r2, [r3, #8]
      break;
 8002b22:	e04f      	b.n	8002bc4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	6899      	ldr	r1, [r3, #8]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f000 fd13 	bl	800355e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b46:	609a      	str	r2, [r3, #8]
      break;
 8002b48:	e03c      	b.n	8002bc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6859      	ldr	r1, [r3, #4]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	461a      	mov	r2, r3
 8002b58:	f000 fc87 	bl	800346a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2150      	movs	r1, #80	; 0x50
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 fce0 	bl	8003528 <TIM_ITRx_SetConfig>
      break;
 8002b68:	e02c      	b.n	8002bc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6859      	ldr	r1, [r3, #4]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	461a      	mov	r2, r3
 8002b78:	f000 fca6 	bl	80034c8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2160      	movs	r1, #96	; 0x60
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fcd0 	bl	8003528 <TIM_ITRx_SetConfig>
      break;
 8002b88:	e01c      	b.n	8002bc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	6859      	ldr	r1, [r3, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	461a      	mov	r2, r3
 8002b98:	f000 fc67 	bl	800346a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2140      	movs	r1, #64	; 0x40
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 fcc0 	bl	8003528 <TIM_ITRx_SetConfig>
      break;
 8002ba8:	e00c      	b.n	8002bc4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	f000 fcb7 	bl	8003528 <TIM_ITRx_SetConfig>
      break;
 8002bba:	e003      	b.n	8002bc4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc0:	e000      	b.n	8002bc4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002bc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e031      	b.n	8002c5a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2202      	movs	r2, #2
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002c06:	6839      	ldr	r1, [r7, #0]
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fb9b 	bl	8003344 <TIM_SlaveTimer_SetConfig>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d009      	beq.n	8002c28 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e018      	b.n	8002c5a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c36:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c46:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a40      	ldr	r2, [pc, #256]	; (8002d78 <TIM_Base_SetConfig+0x114>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d013      	beq.n	8002ca4 <TIM_Base_SetConfig+0x40>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c82:	d00f      	beq.n	8002ca4 <TIM_Base_SetConfig+0x40>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a3d      	ldr	r2, [pc, #244]	; (8002d7c <TIM_Base_SetConfig+0x118>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00b      	beq.n	8002ca4 <TIM_Base_SetConfig+0x40>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a3c      	ldr	r2, [pc, #240]	; (8002d80 <TIM_Base_SetConfig+0x11c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d007      	beq.n	8002ca4 <TIM_Base_SetConfig+0x40>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a3b      	ldr	r2, [pc, #236]	; (8002d84 <TIM_Base_SetConfig+0x120>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d003      	beq.n	8002ca4 <TIM_Base_SetConfig+0x40>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a3a      	ldr	r2, [pc, #232]	; (8002d88 <TIM_Base_SetConfig+0x124>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d108      	bne.n	8002cb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a2f      	ldr	r2, [pc, #188]	; (8002d78 <TIM_Base_SetConfig+0x114>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d01f      	beq.n	8002cfe <TIM_Base_SetConfig+0x9a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc4:	d01b      	beq.n	8002cfe <TIM_Base_SetConfig+0x9a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a2c      	ldr	r2, [pc, #176]	; (8002d7c <TIM_Base_SetConfig+0x118>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d017      	beq.n	8002cfe <TIM_Base_SetConfig+0x9a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a2b      	ldr	r2, [pc, #172]	; (8002d80 <TIM_Base_SetConfig+0x11c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <TIM_Base_SetConfig+0x9a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a2a      	ldr	r2, [pc, #168]	; (8002d84 <TIM_Base_SetConfig+0x120>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00f      	beq.n	8002cfe <TIM_Base_SetConfig+0x9a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a29      	ldr	r2, [pc, #164]	; (8002d88 <TIM_Base_SetConfig+0x124>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00b      	beq.n	8002cfe <TIM_Base_SetConfig+0x9a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a28      	ldr	r2, [pc, #160]	; (8002d8c <TIM_Base_SetConfig+0x128>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d007      	beq.n	8002cfe <TIM_Base_SetConfig+0x9a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a27      	ldr	r2, [pc, #156]	; (8002d90 <TIM_Base_SetConfig+0x12c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d003      	beq.n	8002cfe <TIM_Base_SetConfig+0x9a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a26      	ldr	r2, [pc, #152]	; (8002d94 <TIM_Base_SetConfig+0x130>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d108      	bne.n	8002d10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a10      	ldr	r2, [pc, #64]	; (8002d78 <TIM_Base_SetConfig+0x114>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00f      	beq.n	8002d5c <TIM_Base_SetConfig+0xf8>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <TIM_Base_SetConfig+0x124>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d00b      	beq.n	8002d5c <TIM_Base_SetConfig+0xf8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a11      	ldr	r2, [pc, #68]	; (8002d8c <TIM_Base_SetConfig+0x128>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d007      	beq.n	8002d5c <TIM_Base_SetConfig+0xf8>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a10      	ldr	r2, [pc, #64]	; (8002d90 <TIM_Base_SetConfig+0x12c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d003      	beq.n	8002d5c <TIM_Base_SetConfig+0xf8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a0f      	ldr	r2, [pc, #60]	; (8002d94 <TIM_Base_SetConfig+0x130>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d103      	bne.n	8002d64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	615a      	str	r2, [r3, #20]
}
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40012c00 	.word	0x40012c00
 8002d7c:	40000400 	.word	0x40000400
 8002d80:	40000800 	.word	0x40000800
 8002d84:	40000c00 	.word	0x40000c00
 8002d88:	40013400 	.word	0x40013400
 8002d8c:	40014000 	.word	0x40014000
 8002d90:	40014400 	.word	0x40014400
 8002d94:	40014800 	.word	0x40014800

08002d98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	f023 0201 	bic.w	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f023 0303 	bic.w	r3, r3, #3
 8002dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f023 0302 	bic.w	r3, r3, #2
 8002de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a2c      	ldr	r2, [pc, #176]	; (8002ea4 <TIM_OC1_SetConfig+0x10c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00f      	beq.n	8002e18 <TIM_OC1_SetConfig+0x80>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a2b      	ldr	r2, [pc, #172]	; (8002ea8 <TIM_OC1_SetConfig+0x110>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00b      	beq.n	8002e18 <TIM_OC1_SetConfig+0x80>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a2a      	ldr	r2, [pc, #168]	; (8002eac <TIM_OC1_SetConfig+0x114>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d007      	beq.n	8002e18 <TIM_OC1_SetConfig+0x80>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a29      	ldr	r2, [pc, #164]	; (8002eb0 <TIM_OC1_SetConfig+0x118>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d003      	beq.n	8002e18 <TIM_OC1_SetConfig+0x80>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a28      	ldr	r2, [pc, #160]	; (8002eb4 <TIM_OC1_SetConfig+0x11c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d10c      	bne.n	8002e32 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f023 0308 	bic.w	r3, r3, #8
 8002e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f023 0304 	bic.w	r3, r3, #4
 8002e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a1b      	ldr	r2, [pc, #108]	; (8002ea4 <TIM_OC1_SetConfig+0x10c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00f      	beq.n	8002e5a <TIM_OC1_SetConfig+0xc2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a1a      	ldr	r2, [pc, #104]	; (8002ea8 <TIM_OC1_SetConfig+0x110>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00b      	beq.n	8002e5a <TIM_OC1_SetConfig+0xc2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a19      	ldr	r2, [pc, #100]	; (8002eac <TIM_OC1_SetConfig+0x114>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d007      	beq.n	8002e5a <TIM_OC1_SetConfig+0xc2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a18      	ldr	r2, [pc, #96]	; (8002eb0 <TIM_OC1_SetConfig+0x118>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d003      	beq.n	8002e5a <TIM_OC1_SetConfig+0xc2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a17      	ldr	r2, [pc, #92]	; (8002eb4 <TIM_OC1_SetConfig+0x11c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d111      	bne.n	8002e7e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	621a      	str	r2, [r3, #32]
}
 8002e98:	bf00      	nop
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	40012c00 	.word	0x40012c00
 8002ea8:	40013400 	.word	0x40013400
 8002eac:	40014000 	.word	0x40014000
 8002eb0:	40014400 	.word	0x40014400
 8002eb4:	40014800 	.word	0x40014800

08002eb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	f023 0210 	bic.w	r2, r3, #16
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	021b      	lsls	r3, r3, #8
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f023 0320 	bic.w	r3, r3, #32
 8002f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a28      	ldr	r2, [pc, #160]	; (8002fb8 <TIM_OC2_SetConfig+0x100>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d003      	beq.n	8002f24 <TIM_OC2_SetConfig+0x6c>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a27      	ldr	r2, [pc, #156]	; (8002fbc <TIM_OC2_SetConfig+0x104>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d10d      	bne.n	8002f40 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a1d      	ldr	r2, [pc, #116]	; (8002fb8 <TIM_OC2_SetConfig+0x100>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d00f      	beq.n	8002f68 <TIM_OC2_SetConfig+0xb0>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a1c      	ldr	r2, [pc, #112]	; (8002fbc <TIM_OC2_SetConfig+0x104>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00b      	beq.n	8002f68 <TIM_OC2_SetConfig+0xb0>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a1b      	ldr	r2, [pc, #108]	; (8002fc0 <TIM_OC2_SetConfig+0x108>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d007      	beq.n	8002f68 <TIM_OC2_SetConfig+0xb0>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a1a      	ldr	r2, [pc, #104]	; (8002fc4 <TIM_OC2_SetConfig+0x10c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d003      	beq.n	8002f68 <TIM_OC2_SetConfig+0xb0>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a19      	ldr	r2, [pc, #100]	; (8002fc8 <TIM_OC2_SetConfig+0x110>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d113      	bne.n	8002f90 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	621a      	str	r2, [r3, #32]
}
 8002faa:	bf00      	nop
 8002fac:	371c      	adds	r7, #28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40013400 	.word	0x40013400
 8002fc0:	40014000 	.word	0x40014000
 8002fc4:	40014400 	.word	0x40014400
 8002fc8:	40014800 	.word	0x40014800

08002fcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f023 0303 	bic.w	r3, r3, #3
 8003006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	4313      	orrs	r3, r2
 8003024:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a27      	ldr	r2, [pc, #156]	; (80030c8 <TIM_OC3_SetConfig+0xfc>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d003      	beq.n	8003036 <TIM_OC3_SetConfig+0x6a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a26      	ldr	r2, [pc, #152]	; (80030cc <TIM_OC3_SetConfig+0x100>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d10d      	bne.n	8003052 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800303c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	4313      	orrs	r3, r2
 8003048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <TIM_OC3_SetConfig+0xfc>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00f      	beq.n	800307a <TIM_OC3_SetConfig+0xae>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a1b      	ldr	r2, [pc, #108]	; (80030cc <TIM_OC3_SetConfig+0x100>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00b      	beq.n	800307a <TIM_OC3_SetConfig+0xae>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a1a      	ldr	r2, [pc, #104]	; (80030d0 <TIM_OC3_SetConfig+0x104>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d007      	beq.n	800307a <TIM_OC3_SetConfig+0xae>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a19      	ldr	r2, [pc, #100]	; (80030d4 <TIM_OC3_SetConfig+0x108>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d003      	beq.n	800307a <TIM_OC3_SetConfig+0xae>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a18      	ldr	r2, [pc, #96]	; (80030d8 <TIM_OC3_SetConfig+0x10c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d113      	bne.n	80030a2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	621a      	str	r2, [r3, #32]
}
 80030bc:	bf00      	nop
 80030be:	371c      	adds	r7, #28
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	40013400 	.word	0x40013400
 80030d0:	40014000 	.word	0x40014000
 80030d4:	40014400 	.word	0x40014400
 80030d8:	40014800 	.word	0x40014800

080030dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800310a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800310e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4313      	orrs	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800312a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	031b      	lsls	r3, r3, #12
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a18      	ldr	r2, [pc, #96]	; (800319c <TIM_OC4_SetConfig+0xc0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d00f      	beq.n	8003160 <TIM_OC4_SetConfig+0x84>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a17      	ldr	r2, [pc, #92]	; (80031a0 <TIM_OC4_SetConfig+0xc4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d00b      	beq.n	8003160 <TIM_OC4_SetConfig+0x84>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a16      	ldr	r2, [pc, #88]	; (80031a4 <TIM_OC4_SetConfig+0xc8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d007      	beq.n	8003160 <TIM_OC4_SetConfig+0x84>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a15      	ldr	r2, [pc, #84]	; (80031a8 <TIM_OC4_SetConfig+0xcc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d003      	beq.n	8003160 <TIM_OC4_SetConfig+0x84>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a14      	ldr	r2, [pc, #80]	; (80031ac <TIM_OC4_SetConfig+0xd0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d109      	bne.n	8003174 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003166:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	019b      	lsls	r3, r3, #6
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	4313      	orrs	r3, r2
 8003172:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	621a      	str	r2, [r3, #32]
}
 800318e:	bf00      	nop
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40012c00 	.word	0x40012c00
 80031a0:	40013400 	.word	0x40013400
 80031a4:	40014000 	.word	0x40014000
 80031a8:	40014400 	.word	0x40014400
 80031ac:	40014800 	.word	0x40014800

080031b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80031f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	041b      	lsls	r3, r3, #16
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a17      	ldr	r2, [pc, #92]	; (8003264 <TIM_OC5_SetConfig+0xb4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00f      	beq.n	800322a <TIM_OC5_SetConfig+0x7a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a16      	ldr	r2, [pc, #88]	; (8003268 <TIM_OC5_SetConfig+0xb8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00b      	beq.n	800322a <TIM_OC5_SetConfig+0x7a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a15      	ldr	r2, [pc, #84]	; (800326c <TIM_OC5_SetConfig+0xbc>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d007      	beq.n	800322a <TIM_OC5_SetConfig+0x7a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a14      	ldr	r2, [pc, #80]	; (8003270 <TIM_OC5_SetConfig+0xc0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d003      	beq.n	800322a <TIM_OC5_SetConfig+0x7a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a13      	ldr	r2, [pc, #76]	; (8003274 <TIM_OC5_SetConfig+0xc4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d109      	bne.n	800323e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003230:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	4313      	orrs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	621a      	str	r2, [r3, #32]
}
 8003258:	bf00      	nop
 800325a:	371c      	adds	r7, #28
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	40012c00 	.word	0x40012c00
 8003268:	40013400 	.word	0x40013400
 800326c:	40014000 	.word	0x40014000
 8003270:	40014400 	.word	0x40014400
 8003274:	40014800 	.word	0x40014800

08003278 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	021b      	lsls	r3, r3, #8
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	051b      	lsls	r3, r3, #20
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a18      	ldr	r2, [pc, #96]	; (8003330 <TIM_OC6_SetConfig+0xb8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00f      	beq.n	80032f4 <TIM_OC6_SetConfig+0x7c>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a17      	ldr	r2, [pc, #92]	; (8003334 <TIM_OC6_SetConfig+0xbc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00b      	beq.n	80032f4 <TIM_OC6_SetConfig+0x7c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a16      	ldr	r2, [pc, #88]	; (8003338 <TIM_OC6_SetConfig+0xc0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d007      	beq.n	80032f4 <TIM_OC6_SetConfig+0x7c>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a15      	ldr	r2, [pc, #84]	; (800333c <TIM_OC6_SetConfig+0xc4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d003      	beq.n	80032f4 <TIM_OC6_SetConfig+0x7c>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a14      	ldr	r2, [pc, #80]	; (8003340 <TIM_OC6_SetConfig+0xc8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d109      	bne.n	8003308 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	029b      	lsls	r3, r3, #10
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	621a      	str	r2, [r3, #32]
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40013400 	.word	0x40013400
 8003338:	40014000 	.word	0x40014000
 800333c:	40014400 	.word	0x40014400
 8003340:	40014800 	.word	0x40014800

08003344 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003360:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003372:	f023 0307 	bic.w	r3, r3, #7
 8003376:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b70      	cmp	r3, #112	; 0x70
 8003390:	d01a      	beq.n	80033c8 <TIM_SlaveTimer_SetConfig+0x84>
 8003392:	2b70      	cmp	r3, #112	; 0x70
 8003394:	d860      	bhi.n	8003458 <TIM_SlaveTimer_SetConfig+0x114>
 8003396:	2b60      	cmp	r3, #96	; 0x60
 8003398:	d054      	beq.n	8003444 <TIM_SlaveTimer_SetConfig+0x100>
 800339a:	2b60      	cmp	r3, #96	; 0x60
 800339c:	d85c      	bhi.n	8003458 <TIM_SlaveTimer_SetConfig+0x114>
 800339e:	2b50      	cmp	r3, #80	; 0x50
 80033a0:	d046      	beq.n	8003430 <TIM_SlaveTimer_SetConfig+0xec>
 80033a2:	2b50      	cmp	r3, #80	; 0x50
 80033a4:	d858      	bhi.n	8003458 <TIM_SlaveTimer_SetConfig+0x114>
 80033a6:	2b40      	cmp	r3, #64	; 0x40
 80033a8:	d019      	beq.n	80033de <TIM_SlaveTimer_SetConfig+0x9a>
 80033aa:	2b40      	cmp	r3, #64	; 0x40
 80033ac:	d854      	bhi.n	8003458 <TIM_SlaveTimer_SetConfig+0x114>
 80033ae:	2b30      	cmp	r3, #48	; 0x30
 80033b0:	d055      	beq.n	800345e <TIM_SlaveTimer_SetConfig+0x11a>
 80033b2:	2b30      	cmp	r3, #48	; 0x30
 80033b4:	d850      	bhi.n	8003458 <TIM_SlaveTimer_SetConfig+0x114>
 80033b6:	2b20      	cmp	r3, #32
 80033b8:	d051      	beq.n	800345e <TIM_SlaveTimer_SetConfig+0x11a>
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d84c      	bhi.n	8003458 <TIM_SlaveTimer_SetConfig+0x114>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d04d      	beq.n	800345e <TIM_SlaveTimer_SetConfig+0x11a>
 80033c2:	2b10      	cmp	r3, #16
 80033c4:	d04b      	beq.n	800345e <TIM_SlaveTimer_SetConfig+0x11a>
 80033c6:	e047      	b.n	8003458 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68d9      	ldr	r1, [r3, #12]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	f000 f8c1 	bl	800355e <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80033dc:	e040      	b.n	8003460 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b05      	cmp	r3, #5
 80033e4:	d101      	bne.n	80033ea <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e03b      	b.n	8003462 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6a1a      	ldr	r2, [r3, #32]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0201 	bic.w	r2, r2, #1
 8003400:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003410:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	4313      	orrs	r3, r2
 800341c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	621a      	str	r2, [r3, #32]
      break;
 800342e:	e017      	b.n	8003460 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	6899      	ldr	r1, [r3, #8]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	461a      	mov	r2, r3
 800343e:	f000 f814 	bl	800346a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003442:	e00d      	b.n	8003460 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6818      	ldr	r0, [r3, #0]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	6899      	ldr	r1, [r3, #8]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	461a      	mov	r2, r3
 8003452:	f000 f839 	bl	80034c8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003456:	e003      	b.n	8003460 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	75fb      	strb	r3, [r7, #23]
      break;
 800345c:	e000      	b.n	8003460 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800345e:	bf00      	nop
  }

  return status;
 8003460:	7dfb      	ldrb	r3, [r7, #23]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800346a:	b480      	push	{r7}
 800346c:	b087      	sub	sp, #28
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	f023 0201 	bic.w	r2, r3, #1
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003494:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f023 030a 	bic.w	r3, r3, #10
 80034a6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	621a      	str	r2, [r3, #32]
}
 80034bc:	bf00      	nop
 80034be:	371c      	adds	r7, #28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f023 0210 	bic.w	r2, r3, #16
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	031b      	lsls	r3, r3, #12
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003504:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	621a      	str	r2, [r3, #32]
}
 800351c:	bf00      	nop
 800351e:	371c      	adds	r7, #28
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4313      	orrs	r3, r2
 8003546:	f043 0307 	orr.w	r3, r3, #7
 800354a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	609a      	str	r2, [r3, #8]
}
 8003552:	bf00      	nop
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800355e:	b480      	push	{r7}
 8003560:	b087      	sub	sp, #28
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003578:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	021a      	lsls	r2, r3, #8
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	431a      	orrs	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	4313      	orrs	r3, r2
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	609a      	str	r2, [r3, #8]
}
 8003592:	bf00      	nop
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
	...

080035a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e068      	b.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a2e      	ldr	r2, [pc, #184]	; (8003698 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d004      	beq.n	80035ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a2d      	ldr	r2, [pc, #180]	; (800369c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d108      	bne.n	80035fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80035f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003604:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4313      	orrs	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1e      	ldr	r2, [pc, #120]	; (8003698 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d01d      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362a:	d018      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a1b      	ldr	r2, [pc, #108]	; (80036a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d013      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1a      	ldr	r2, [pc, #104]	; (80036a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d00e      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a18      	ldr	r2, [pc, #96]	; (80036a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d009      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a13      	ldr	r2, [pc, #76]	; (800369c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d004      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a14      	ldr	r2, [pc, #80]	; (80036ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d10c      	bne.n	8003678 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003664:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	4313      	orrs	r3, r2
 800366e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40012c00 	.word	0x40012c00
 800369c:	40013400 	.word	0x40013400
 80036a0:	40000400 	.word	0x40000400
 80036a4:	40000800 	.word	0x40000800
 80036a8:	40000c00 	.word	0x40000c00
 80036ac:	40014000 	.word	0x40014000

080036b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e065      	b.n	8003798 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4313      	orrs	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003732:	4313      	orrs	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	041b      	lsls	r3, r3, #16
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a16      	ldr	r2, [pc, #88]	; (80037a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d004      	beq.n	800375a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a14      	ldr	r2, [pc, #80]	; (80037a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d115      	bne.n	8003786 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	051b      	lsls	r3, r3, #20
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	4313      	orrs	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	40012c00 	.word	0x40012c00
 80037a8:	40013400 	.word	0x40013400

080037ac <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
  assert_param(IS_TIM_REMAP(Remap));

  __HAL_LOCK(htim);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_TIMEx_RemapConfig+0x18>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e038      	b.n	8003836 <HAL_TIMEx_RemapConfig+0x8a>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set ETR_SEL bit field (if required) */
  if (IS_TIM_ETRSEL_INSTANCE(htim->Instance))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1c      	ldr	r2, [pc, #112]	; (8003844 <HAL_TIMEx_RemapConfig+0x98>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00e      	beq.n	80037f4 <HAL_TIMEx_RemapConfig+0x48>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037de:	d009      	beq.n	80037f4 <HAL_TIMEx_RemapConfig+0x48>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a18      	ldr	r2, [pc, #96]	; (8003848 <HAL_TIMEx_RemapConfig+0x9c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d004      	beq.n	80037f4 <HAL_TIMEx_RemapConfig+0x48>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a17      	ldr	r2, [pc, #92]	; (800384c <HAL_TIMEx_RemapConfig+0xa0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d111      	bne.n	8003818 <HAL_TIMEx_RemapConfig+0x6c>
  {
    tmpor2 = htim->Instance->OR2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fa:	60fb      	str	r3, [r7, #12]
    tmpor2 &= ~TIM1_OR2_ETRSEL_Msk;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f423 33e0 	bic.w	r3, r3, #114688	; 0x1c000
 8003802:	60fb      	str	r3, [r7, #12]
    tmpor2 |= (Remap & TIM1_OR2_ETRSEL_Msk);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4313      	orrs	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]

    /* Set TIMx_OR2 */
    htim->Instance->OR2 = tmpor2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Set other remapping capabilities */
  tmpor1 = Remap;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	60bb      	str	r3, [r7, #8]
  tmpor1 &= ~TIM1_OR2_ETRSEL_Msk;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f423 33e0 	bic.w	r3, r3, #114688	; 0x1c000
 8003822:	60bb      	str	r3, [r7, #8]

  /* Set TIMx_OR1 */
  htim->Instance->OR1 = tmpor1;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40012c00 	.word	0x40012c00
 8003848:	40000400 	.word	0x40000400
 800384c:	40013400 	.word	0x40013400

08003850 <__libc_init_array>:
 8003850:	b570      	push	{r4, r5, r6, lr}
 8003852:	4d0d      	ldr	r5, [pc, #52]	; (8003888 <__libc_init_array+0x38>)
 8003854:	4c0d      	ldr	r4, [pc, #52]	; (800388c <__libc_init_array+0x3c>)
 8003856:	1b64      	subs	r4, r4, r5
 8003858:	10a4      	asrs	r4, r4, #2
 800385a:	2600      	movs	r6, #0
 800385c:	42a6      	cmp	r6, r4
 800385e:	d109      	bne.n	8003874 <__libc_init_array+0x24>
 8003860:	4d0b      	ldr	r5, [pc, #44]	; (8003890 <__libc_init_array+0x40>)
 8003862:	4c0c      	ldr	r4, [pc, #48]	; (8003894 <__libc_init_array+0x44>)
 8003864:	f000 f820 	bl	80038a8 <_init>
 8003868:	1b64      	subs	r4, r4, r5
 800386a:	10a4      	asrs	r4, r4, #2
 800386c:	2600      	movs	r6, #0
 800386e:	42a6      	cmp	r6, r4
 8003870:	d105      	bne.n	800387e <__libc_init_array+0x2e>
 8003872:	bd70      	pop	{r4, r5, r6, pc}
 8003874:	f855 3b04 	ldr.w	r3, [r5], #4
 8003878:	4798      	blx	r3
 800387a:	3601      	adds	r6, #1
 800387c:	e7ee      	b.n	800385c <__libc_init_array+0xc>
 800387e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003882:	4798      	blx	r3
 8003884:	3601      	adds	r6, #1
 8003886:	e7f2      	b.n	800386e <__libc_init_array+0x1e>
 8003888:	08003900 	.word	0x08003900
 800388c:	08003900 	.word	0x08003900
 8003890:	08003900 	.word	0x08003900
 8003894:	08003904 	.word	0x08003904

08003898 <memset>:
 8003898:	4402      	add	r2, r0
 800389a:	4603      	mov	r3, r0
 800389c:	4293      	cmp	r3, r2
 800389e:	d100      	bne.n	80038a2 <memset+0xa>
 80038a0:	4770      	bx	lr
 80038a2:	f803 1b01 	strb.w	r1, [r3], #1
 80038a6:	e7f9      	b.n	800389c <memset+0x4>

080038a8 <_init>:
 80038a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038aa:	bf00      	nop
 80038ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ae:	bc08      	pop	{r3}
 80038b0:	469e      	mov	lr, r3
 80038b2:	4770      	bx	lr

080038b4 <_fini>:
 80038b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b6:	bf00      	nop
 80038b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ba:	bc08      	pop	{r3}
 80038bc:	469e      	mov	lr, r3
 80038be:	4770      	bx	lr
